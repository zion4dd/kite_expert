"""
Django settings for kite_expert project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=BASE_DIR.parent)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "true"

DOMAIN = os.getenv("DOMAIN")

USER_IS_ACTIVE = (
    os.getenv("USER_IS_ACTIVE") == "true"
)  ### user register set field 'is_active'

MAX_IMAGE_SIZE = int(os.getenv("MAX_IMAGE_SIZE", 1200))  ###

ALLOWED_HOSTS = ["localhost", DOMAIN, f"www.{DOMAIN}"]

INTERNAL_IPS = ["127.0.0.1"]

CSRF_TRUSTED_ORIGINS = [f"https://*.{DOMAIN}", "https://*.127.0.0.1"]  ###

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "kites.apps.KitesConfig",  ###
    "debug_toolbar",  ### https://pypi.org/project/django-debug-toolbar/
    "djcelery_email",  ### https://pypi.org/project/django-celery-email/
    "rest_framework",  ### https://www.django-rest-framework.org/
    "rest_framework.authtoken",  ###
    "djoser",  ### https://djoser.readthedocs.io/en/latest/settings.html
    "drf_yasg",  ### https://drf-yasg.readthedocs.io/en/stable/readme.html
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",  ###
]

ROOT_URLCONF = "kite_expert.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kite_expert.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ru"  #'en-us'

TIME_ZONE = "Europe/Moscow"  #'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

###
LOGIN_URL = "login"
PROFILE_IMAGE = "kites/images/profile.png"

STATIC_ROOT = os.path.join(BASE_DIR, "static")  # общая папка

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"
# в kite_expert/urls.py добавить путь для режима Debug:
# if settings.DEBUG:
#   urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# CASH options
CACHES = {
    "default": {
        # 'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        # 'LOCATION': os.path.join(BASE_DIR, 'cache'),
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/5",
        # "OPTIONS": {
        #     "DB": 0,
        #     "PASSWORD": 'pass',
        #     "PARSER_CLASS": 'redis.connection.HiredisParser',
        # }
    }
}


# Celery Configuration Options
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = "redis://localhost:6379/6"
CELERY_RESULT_BACKEND = "redis://localhost:6379/6"
CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600}
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"


# Email
# https://docs.djangoproject.com/en/5.0/topics/email/

# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"

EMAIL_HOST = "smtp.beget.com"
EMAIL_PORT = 465
EMAIL_HOST_USER = f"password-reset@{DOMAIN}"
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_SSL = True
# EMAIL_USE_TSL = True

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER


# DRF
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 5,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",  # default session auth
        "rest_framework.authentication.SessionAuthentication",  # default session auth
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
        # 'rest_framework.permissions.IsAuthenticated',
    ],
}
if DEBUG:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] += [
        "rest_framework.renderers.BrowsableAPIRenderer"
    ]

DJOSER = {
    # https://djoser.readthedocs.io/en/latest/settings.html#serializers
    "SERIALIZERS": {
        "user_create": "kites.serializers.IsActiveUserCreateSerializer",
    },
}

# debug; info; warning; error; critical
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            # "level": "WARNING",
            "class": "logging.StreamHandler",
        },
        "file_debug": {
            # "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "log/debug.log"),
            "formatter": "simple",
            "maxBytes": 1024 * 1024,  # 1MB
            "backupCount": 10,
        },
        "file_test": {
            # "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "log/test.log"),
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file_debug"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "WARNING"),
            "propagate": False,
        },
        "test": {
            "handlers": ["file_test"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


""" The “sites” framework to change {domain} {sitename}
https://docs.djangoproject.com/en/4.2/ref/contrib/sites/#enabling-the-sites-framework
>>> from django.contrib.sites.models import Site
>>> my_site = Site.objects.get(pk=1)
>>> my_site.domain = 'somedomain.com'
>>> my_site.name = 'Some Domain'
>>> my_site.save()
SITE_ID = 1
OR
>>> my_site = Site(domain='some_domain.com', name='Some Domain')
>>> my_site.save()
>>> print my_site.id
2
SITE_ID = 2
"""
